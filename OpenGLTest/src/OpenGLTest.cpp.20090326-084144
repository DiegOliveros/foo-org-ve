#include <iostream>
#include <cstdlib>
#include <GL/glut.h>
#include <GL/gl.h>

using namespace std;

GLdouble ang = 0;
GLdouble dst = 5;

int prevX;
int prevY;

GLdouble angX;
GLdouble angY;

// --------------------------------------------------------------------------------

void reshape(int width, int height) {
	glViewport(0, 0, width, height);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	// glFrustum(-2, 2, -2, 2, -5, 2);
	gluPerspective(60, 1, 1, 10);
	gluLookAt( //
			0, 0, 4, //  eye
			0, 0, 0, //  cnt
			0, 1, 0); // upv

	glMatrixMode(GL_MODELVIEW);
}

// --------------------------------------------------------------------------------

void drawBox4d(GLdouble cx, GLdouble cy, GLdouble cz, GLdouble l) {
	glPushMatrix();

	// ----------------------------------------

	glRotated(angX, 1, 0, 0);
	glRotated(angY, 0, 1, 0);

	// ----------------------------------------

	glBegin(GL_QUADS);

	GLdouble xM = cx - l / 2;
	GLdouble xP = cx + l / 2;

	GLdouble yM = cy - l / 2;
	GLdouble yP = cy + l / 2;

	GLdouble zM = cz - l / 2;
	GLdouble zP = cz + l / 2;

	// ----------------------------------------
	// yM (BOT)
	// ----------------------------------------
	glColor3f(1, 0, 0);
	glVertex3f(xM, yM, zM);
	glVertex3f(xP, yM, zM);
	glVertex3f(xP, yM, zP);
	glVertex3f(xM, yM, zP);

	// ----------------------------------------
	// zP (FRN)
	// ----------------------------------------
	glColor3f(0, 1, 0);
	glVertex3f(xP, yM, zP);
	glVertex3f(xM, yM, zP);
	glVertex3f(xM, yP, zP);
	glVertex3f(xP, yP, zP);

	// ----------------------------------------
	// yP (TOP)
	// ----------------------------------------
	glColor3f(0, 0, 1);
	glVertex3f(xP, yP, zP);
	glVertex3f(xM, yP, zP);
	glVertex3f(xM, yP, zM);
	glVertex3f(xP, yP, zM);

	// ----------------------------------------
	// zM (BCK)
	// ----------------------------------------
	glColor3f(1, 1, 0);
	glVertex3f(xP, yP, zM);
	glVertex3f(xM, yP, zM);
	glVertex3f(xM, yM, zM);
	glVertex3f(xP, yM, zM);

	// ----------------------------------------
	// xM (LFT)
	// ----------------------------------------
	glColor3f(1, 0, 1);
	glVertex3f(xM, yP, zP);
	glVertex3f(xM, yM, zP);
	glVertex3f(xM, yM, zM);
	glVertex3f(xM, yP, zM);

	// ----------------------------------------
	// xP (RGH)
	// ----------------------------------------
	glColor3f(0, 1, 1);
	glVertex3f(xP, yP, zP);
	glVertex3f(xP, yM, zP);
	glVertex3f(xP, yM, zM);
	glVertex3f(xP, yP, zM);

	glEnd();

	glPopMatrix();
}

// --------------------------------------------------------------------------------

void display() {
	// glClear(GL_COLOR_BUFFER_BIT);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
	glLoadIdentity();
	drawBox4d(0, 0, 0, 2);
	glFlush();
}

// --------------------------------------------------------------------------------

void init() {
	glClearColor(0, 0, 0, 0);
	glDisable(GL_CULL_FACE);
	glEnable(GL_DEPTH_TEST);
}

// --------------------------------------------------------------------------------

void mouseFunc(int a, int b, int x, int y) {
	cout << "a: " << a << "; b: " << b //
			<< "; x: " << x << "; y: " << y << endl;

	prevX = x;
	prevY = y;
}

// --------------------------------------------------------------------------------

void motionFunc(int x, int y) {
	cout << "x: " << x << "; y: " << y << endl;

	double dx = x - prevX;
	double dy = y - prevY;

	dx /= 10;
	dy /= 10;

	angX += dy;
	angY += dx;

	prevX = x;
	prevY = y;

	glutPostRedisplay();
}

// --------------------------------------------------------------------------------

int main(int argc, char **argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(50, 50);
	glutInitWindowSize(640, 480);
	glutCreateWindow(argv[0]);

	init();

	glutMouseFunc/* */(mouseFunc);
	glutMotionFunc/**/(motionFunc);

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMainLoop();
}
